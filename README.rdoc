== EM-REDIS-CLUSTER

== DESCRIPTION:

An EventMachine[http://rubyeventmachine.com/] based library for interacting with the very cool Redis[http://code.google.com/p/redis/] data store by Salvatore 'antirez' Sanfilippo.
Modeled after eventmachine's implementation of the memcached protocol, and influenced by Ezra Zygmuntowicz's {redis-rb}[http://github.com/ezmobius/redis-rb/tree/master] library (distributed as part of Redis).

This library is only useful when used as part of an application that relies on
Event Machine's event loop.  It implements an EM-based client protocol, which
leverages the non-blocking nature of the EM interface to achieve significant
parallelization without threads.


== FEATURES/PROBLEMS:

Implements most Redis commands (see {the list of available commands here}[http://code.google.com/p/redis/wiki/CommandReference] with the notable
exception of MONITOR.
Implements Redis Cluster by integrating {antirez's job}[https://github.com/antirez/redis-rb-cluster] into em-redis.

== SYNOPSIS:

Like any Deferrable eventmachine-based protocol implementation, using EM-Redis-Cluster involves making calls and passing blocks that serve as callbacks when the call returns.  

  require 'em_redis_cluster'

  # Cluster mode
  EM.run do
    startup_nodes = [
      {:host => "127.0.0.1", :port => 7000},
      {:host => "127.0.0.1", :port => 7001},
    ]

    rc = EM::Protocols::RedisCluster.new(startup_nodes, logger: Logger.new(STDOUT), reconn_timer: 0.5)
    # callback when cluster slots information has been retrieved
    rc.mapped_hmset("foo", {bar: 1, timestamp: Time.now.to_s}) do |rsp|
      if rsp.is_a?(StandardError)
        # handle error
      else
        p rsp
      end
      EM.stop
    end
  end
  
  # Non-cluster mode
  EM.run do
    redis = EM::Protocols::Redis.connect
    redis.errback do |code|
      puts "Error code: #{code}"
    end
    redis.set "a", "foo" do |response|
      redis.get "a" do |response|
        puts response
      end
    end
    # We get pipelining for free
    redis.set("b", "bar")
    redis.get("a") do |response|
      puts response # will be foo
    end
  end
  
To run tests on a Redis server (currently compatible with 2.2)

  rake

Because the EM::Protocol::Memcached code used Bacon for testing, test code is
currently in the form of bacon specs.

== REQUIREMENTS:

* Redis (download[http://code.google.com/p/redis/downloads/list])

== INSTALL:

  sudo gem install em_redis_cluster

== LICENSE:

(The MIT License)

Copyright (c) 2008, 2009

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

== CREDIT

    by Jonathan Broad (http://www.relativepath.org)

